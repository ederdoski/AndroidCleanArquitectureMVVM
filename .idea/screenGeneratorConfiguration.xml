<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ScreenGeneratorConfiguration">
    <option name="settings">
      <Settings>
        <option name="categories">
          <list>
            <Category>
              <option name="name" value="NewFeature" />
            </Category>
          </list>
        </option>
        <option name="screenElements">
          <list>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Analytics" />
              <option name="subdirectory" value="analytics" />
              <option name="template" value="package %packageName%.analytics&#10;&#10;import com.adrena.basearchitect.core.analytics.BaseAnalytics&#10;&#10;class %screenName%%screenElement% : BaseAnalytics {&#10;&#10;    companion object {&#10;        private const val APP_SCREEN_NAME = &quot;&quot;&#10;        private const val APP_CATEGORY_NAME = &quot;&quot;&#10;        private const val APP_SUBCATEGORY_NAME = &quot;&quot;&#10;    }&#10;&#10;    constructor() : this(&#10;    appScreenName = APP_SCREEN_NAME,&#10;    appCategory = APP_CATEGORY_NAME,&#10;    appSubcategory = APP_SUBCATEGORY_NAME&#10;    )&#10;&#10;    private constructor(&#10;            appScreenName: String,&#10;    appCategory: String,&#10;    appSubcategory: String&#10;    ) : super(appScreenName, appCategory, appSubcategory)&#10;&#10;&#10;    // ----------------------------- Actions events -----------------------------&#10;&#10;    fun trackSomeEvent(){&#10;        //trackEvent(actionType = AnalyticsEventsPrefixEnum.BUTTON, actionName = &quot;press_on_btn&quot;)&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="DeleteThisFile" />
              <option name="name" value="Datasource" />
              <option name="subdirectory" value="datasource" />
              <option name="template" value="package %packageName%&#10;&#10;class %screenName%%screenElement%" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Module" />
              <option name="subdirectory" value="module" />
              <option name="template" value="package %packageName%.module&#10;&#10;//--- Koin&#10;import org.koin.androidx.viewmodel.dsl.viewModel&#10;import org.koin.core.module.Module&#10;import org.koin.dsl.module&#10;&#10;//--- Retrofit&#10;import retrofit2.Retrofit&#10;&#10;import %packageName%.datasource.repository.I%screenName%Repository&#10;import %packageName%.datasource.repository.%screenName%Repository&#10;import %packageName%.datasource.service.I%screenName%Service&#10;import %packageName%.usecase.%screenName%UseCase&#10;import %packageName%.viewmodel.%screenName%VMDelegate&#10;import %packageName%.viewmodel.%screenName%ViewModel&#10;        &#10;val %screenNameLowerCase%%screenElement% : Module =  module {&#10;&#10;    //--- Inject viewModel&#10;    viewModel {&#10;        %screenName%ViewModel(&#10;        context = get(),&#10;        %screenNameLowerCase%UseCase = get(),&#10;        delegate = get())&#10;    }&#10;    factory { provider%screenName%VMDelegate() }&#10;&#10;    //--- Inject repository&#10;    single&lt;I%screenName%Repository&gt; {&#10;        %screenName%Repository(&#10;            I%screenName%Service = get()&#10;        )&#10;    }&#10;    //--- Inject useCase&#10;    single { provider%screenName%UseCase(get()) }&#10;&#10;    //--- Inject service&#10;    single { provider%screenName%Service(get()) }&#10;}&#10;&#10;fun provider%screenName%VMDelegate(): %screenName%VMDelegate{&#10;    return %screenName%VMDelegate()&#10;}&#10;&#10;fun provider%screenName%UseCase(%screenNameLowerCase%Repository: I%screenName%Repository): %screenName%UseCase{&#10;    return %screenName%UseCase(%screenNameLowerCase%Repository)&#10;}&#10;&#10;fun provider%screenName%Service(retrofit: Retrofit): I%screenName%Service{&#10;    return retrofit.create(I%screenName%Service::class.java)&#10;}&#10;&#10;fun provider%screenName%Service(retrofit: Retrofit): I%screenName%Service{&#10;    return retrofit.create(I%screenName%Service::class.java)&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Usecase" />
              <option name="subdirectory" value="usecase" />
              <option name="template" value="package %packageName%.usecase&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;import %packageName%.core.base.BasicUseCase&#10;import %packageName%.core.base.Response&#10;import %packageName%.datasource.repository.I%screenName%Repository&#10;import java.io.InputStream&#10;&#10;class %screenName%%screenElement%(private val %screenNameLowerCase%Repository: I%screenName%Repository) :&#10;BasicUseCase&lt;Flow&lt;Response&lt;List&lt;%screenName%UseCaseModel&gt;&gt;&gt;&gt;() {&#10;&#10;    fun bind() {&#10;        //--- Set your request object&#10;    }&#10;    override suspend fun execute(): Flow&lt;Response&lt;List&lt;%screenName%UseCaseModel&gt;&gt;&gt;{&#10;        return %screenNameLowerCase%Repository.callGetSomeMethod()&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="View" />
              <option name="subdirectory" value="view" />
              <option name="template" value="package %packageName%&#10;&#10;class %screenName%%screenElement%" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModel" />
              <option name="subdirectory" value="viewModel" />
              <option name="template" value="package %packageName%&#10;&#10;import android.content.Context&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import kotlinx.coroutines.InternalCoroutinesApi&#10;import kotlinx.coroutines.flow.collect&#10;import kotlinx.coroutines.flow.single&#10;import kotlinx.coroutines.launch&#10;import %packageName%.core.base.BaseViewModel&#10;import %packageName%.core.base.Response&#10;import %packageName%.core.exception.GenericExceptionModel&#10;import %packageName%.core.exception.NotNetworkException&#10;&#10;import %packageName%.usecase.%screenName%UseCase&#10;import %packageName%.viewmodel.%screenName%VMDelegate&#10;&#10;class %screenName%%screenElement%(&#10;private val context: Context,&#10;private val %screenNameLowerCase%UseCase: %screenName%UseCase,&#10;val delegate: %screenName%VMDelegate&#10;) : BaseViewModel(context) {&#10;&#10;    /*&#10;    Ejemplo de ejecuciÃ³n sobre un caso de uso&#10;    &#10;    @ExperimentalCoroutinesApi&#10;    @InternalCoroutinesApi&#10;    fun callGetStores(latitude: Double?, longitude: Double?) {&#10;&#10;        viewModelScope.launch {&#10;            storeUseCase.binData(latitude, longitude)&#10;            executeSimpleUseCase(storeUseCase, configuration).single().collect {&#10;                println(&quot;DATOS ESPERADO=&quot; + it.toString())&#10;                when (it) {&#10;                    is Response.Success&lt;List&lt;Store&gt;&gt; -&gt; {&#10;                        val storeSubsidiaryId = it.successData.joinToString { store -&gt;&#10;                            store.storeSubsidiariId&#10;                        }&#10;                        userDataPreferences.saveSubsidiariesId(storeSubsidiaryId)&#10;                        mutableListStoresLiveData.value =&#10;                            StoreModelMapper.listStoreToListStoreModel(it.successData)&#10;                    }&#10;&#10;                    is Response.Failure&lt;Exception&gt; -&gt; {&#10;                        when (it.errorData) {&#10;                            is NotNetworkException -&gt; {&#10;                                mutableErrorNetworkLiveData.value = true&#10;                            }&#10;                            is GenericExceptionModel -&gt; {&#10;                                mutableErrorGenericLiveData.value = true&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;     */&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewActivity" />
              <option name="subdirectory" value="view" />
              <option name="template" value="package %packageName%.view&#10;&#10;import pe.agora.express.core.base.BaseActivity&#10;import pe.agora.express.databinding.%screenName%%screenElement%Binding&#10;&#10;class %screenName%%screenElement%: BaseActivity&lt;%screenName%%screenElement%Binding&gt;() {&#10;    override fun init() {&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewFragment" />
              <option name="subdirectory" value="view" />
              <option name="template" value="package %packageName%.view&#10;&#10;import androidx.lifecycle.Observer&#10;import org.koin.androidx.viewmodel.ext.android.viewModel&#10;&#10;import %packageName%.core.base.BaseFragment&#10;import %packageName%.core.base.BaseViewModel&#10;&#10;import %packageName%.core.extensions.Event&#10;import %packageName%.core.extensions.observe&#10;import %packageName%.core.extensions.toGone&#10;import %packageName%.core.extensions.toVisible&#10;import androidx.navigation.fragment.navArgs&#10;&#10;import %packageName%.databinding.%screenName%%screenElement%Binding&#10;&#10;import %packageName%.viewmodel.%screenName%ViewModel&#10;&#10;class %screenName%%screenElement% : BaseFragment&lt;%screenName%%screenElement%Binding&gt;() {&#10;&#10;    private val %screenNameLowerCase%ViewModel: %screenName%ViewModel by viewModel()&#10;    private val viewInputArgument: %screenName%%screenElement%Args by navArgs()&#10;&#10;    override fun screenName() = %screenName%&#10;    &#10;    override fun getViewModel(): BaseViewModel = %screenNameLowerCase%ViewModel&#10;    &#10;    override fun setupObserversViewModel() {&#10;        observe(%screenNameLowerCase%ViewModel.delegate.showProgress, this::showProgress)&#10;        observe(%screenNameLowerCase%ViewModel.delegate.hideProgress, this::hideProgress)&#10;        observe(%screenNameLowerCase%ViewModel.delegate.showNetworkError, this::showNetworkError)&#10;        observe(%screenNameLowerCase%ViewModel.delegate.hideNetworkError, this::hideNetworkError)&#10;        observe(%screenNameLowerCase%ViewModel.delegate.showUnknownError, this::showUnknownError)&#10;        observe(%screenNameLowerCase%ViewModel.delegate.hideUnknownError, this::hideUnknownError)&#10;    }&#10;&#10;    override fun init() {&#10;        //---- Initialize your ui here&#10;    }&#10;    &#10;    //----- UI Methods&#10;    private fun showProgress(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.progress.viewProgress.toVisible()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun hideProgress(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.progress.viewProgress.toGone()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showNetworkError(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.notNetwork.root.toVisible()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun hideNetworkError(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.notNetwork.root.toGone()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showUnknownError(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.genericError.root.toVisible()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun hideUnknownError(event: Event&lt;Unit&gt;) {&#10;        event.getContentIfNotHandled().let {&#10;            it?.apply {&#10;                bindingView.genericError.root.toGone()&#10;            }&#10;        }&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModelDelegate" />
              <option name="subdirectory" value="viewmodel" />
              <option name="template" value="package %packageName%.viewmodel&#10;&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import pe.agora.express.core.extensions.Event&#10;&#10;class %screenName%VMDelegate {&#10;    //region Generic actions&#10;    //region Show progress view&#10;    private val _showProgress = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val showProgress: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _showProgress&#10;    fun showProgressPostValue() {&#10;        _showProgress.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //region Hide progress view&#10;    private val _hideProgress = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val hideProgress: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _hideProgress&#10;    fun hideProgressPostValue() {&#10;        _hideProgress.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //region Show Network error&#10;    private val _showNetworkError = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val showNetworkError: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _showNetworkError&#10;    fun showNetworkErrorPostValue() {&#10;        _showNetworkError.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //region Hide Network error&#10;    private val _hideNetworkError = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val hideNetworkError: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _hideNetworkError&#10;    fun hideNetworkErrorPostValue() {&#10;        _hideNetworkError.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //region Show Unknown error&#10;    private val _showUnknownError = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val showUnknownError: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _showUnknownError&#10;    fun showUnknownErrorPostValue() {&#10;        _showUnknownError.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //region Hide Unknown error&#10;    private val _hideUnknownError = MutableLiveData&lt;Event&lt;Unit&gt;&gt;()&#10;    val hideUnknownError: LiveData&lt;Event&lt;Unit&gt;&gt; get() = _hideUnknownError&#10;    fun hideUnknownErrorPostValue() {&#10;        _hideUnknownError.value = Event(Unit)&#10;    }&#10;    //endregion&#10;    //endregion&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenNameSnakeCase%_view_fragment" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="LayoutFragment" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; &#10;        android:background=&quot;@color/white&quot;&gt;&#10;&#10;        &lt;RelativeLayout android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot; &#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;            &#10;            &lt;TextView android:layout_width=&quot;wrap_content&quot; &#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_centerInParent=&quot;true&quot; &#10;                tools:text=&quot;Insert content here&quot; /&gt;&#10;            &#10;        &lt;/RelativeLayout&gt;&#10;&#10;        &lt;include&#10;            android:id=&quot;@+id/not_network&quot;&#10;            layout=&quot;@layout/layout_error_not_network_connection&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;&#10;        &lt;include&#10;            android:id=&quot;@+id/generic_error&quot;&#10;            layout=&quot;@layout/layout_error_generic&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenNameSnakeCase%_view_activity" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="LayoutActivity" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;%packageName%.view.%screenName%ViewActivity&quot;&gt;&#10;&#10;    &lt;androidx.fragment.app.FragmentContainerView&#10;        android:id=&quot;@+id/content_fragment_%screenName%&quot;&#10;        android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:defaultNavHost=&quot;true&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;        app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:navGraph=&quot;@navigation/login_view_navigation&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;&#10;" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenNameSnakeCase%_view_navigation" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="Navigation" />
              <option name="sourceSet" value="navigation" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/%screenNameSnakeCase%_navigation&quot;&#10;    app:startDestination=&quot;@id/%screenNameSnakeCase%_entry&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/%screenNameSnakeCase%_entry&quot;&#10;        android:name=&quot;%packageName%.view.%screenName%ViewFragment&quot;&#10;        android:label=&quot;%screenName%Entry&quot;&#10;        tools:layout=&quot;@layout/%screenNameSnakeCase%_view_fragment&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;%screenNameLowerCase%ViewInput&quot;&#10;            android:defaultValue=&quot;@null&quot;&#10;            app:argType=&quot;%packageName%.view.%screenName%ViewInput&quot;&#10;            app:nullable=&quot;true&quot;/&gt;&#10;    &lt;/fragment&gt;&#10;&#10;&lt;/navigation&gt;" />
            </ScreenElement>
          </list>
        </option>
      </Settings>
    </option>
  </component>
</project>